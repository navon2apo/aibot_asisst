.

---

  ב־Flutter Desktop**

#### 1. **מטרה עיקרית**

בוט שולחני עם בועה צפה שמלווה את המשתמש בכל פעולה – מסייע, מסביר, ממיר טקסט מסרטונים, מדריך שלב-שלב ומאפשר שיח רציף כולל OCR ו־GPT.

---

#### 2. **פיצ'רים מרכזיים**

##### א. **UI עיקרי: Bubble Overlay**

* בועה קטנה צפה על כל חלון.
* ניתן לגרור אותה.
* בלחיצה – נפתח חלון צ'אט קטן.
* תפריט פעולות:

  * סכם לי סרטון (הדבק קישור/הקלט מסך).
  * הפוך לטוטוריאל.
  * הפוך למשימה.
  * צילום מסך + שאלה.
  * שאלה חופשית.

##### ב. **Chat Window**

* תומך בטקסט, תמונות מהמסך, והעתקה של טקסטים.
* מאפשר מעקב אחרי שיחה ומשימות.

##### ג. **OCR + צילום מסך**

* שימוש ב־`flutter_tesseract_ocr` עם `screenshot` או `desktop_capture`.
* לחיצה → צילום מסך → זיהוי טקסט → שליחה ל־GPT.

##### ד. **שילוב GPT**

* שימוש ב־HTTP POST מול OpenAI או Claude.
* שליחה של הטקסט עם prompt אוטומטי, חזרה עם תוצאה.

##### ה. **ניהול קונטקסט (Context Manager)**

* שמירה של שיחה מתמשכת (לפי נושא/פרויקט).
* אפשרות להמשיך מאותה נקודה בכל שלב.
* אם עובר רף מידע → סיכום פנימי ופתיחת שיחה "חדשה".

##### ו. **משימות + הדרכה**

* המרה של בקשה למשימה (עם כפתור).
* הצגת חצים והכוונה על המסך עם Flutter Overlay (`flutter_overlay_window` או `bitsdojo_window`).
* אפשרות "העתק שדה" או "העבר לשדה אוטומטית".

---

### 3. **תשתיות**

| רכיב             | טכנולוגיה                                         |
| ---------------- | ------------------------------------------------- |
| בניית UI         | `Flutter`, `Material 3` או `Shadcn-like UI`       |
| OCR              | `flutter_tesseract_ocr`                           |
| צילום מסך        | `desktop_capture`, `flutter_screen_capture`       |
| GPT              | `http` + `dotenv` + OpenAI API                    |
| שמירת קונטקסט    | `hive`, `isar` או `sqlite`                        |
| ריצות רקע        | `flutter_isolate` או `flutter_background_service` |
| חצים וממשק הדרכה | `custom painter`, `overlay`, `stack`              |

---

### 4. **MVP (שלב ראשון פשוט)**

* [x] בועה צפה עם פתיחת צ'אט.
* [x] כפתור לצילום מסך.
* [x] זיהוי טקסט מהתמונה.
* [x] שליחה ל־GPT והצגת התשובה.
* [ ] שמירת קונטקסט פשוט עם Hive.
* [ ] תרגום תשובות לעברית אוטומטית.
* [ ] UI בסיסי עם כפתורים להדרכה.

---

### **שלב 1: הפעלת תמיכה בדסקטופ**

ב־Terminal תריץ את זה (פעם אחת בלבד):

```bash
flutter config --enable-windows-desktop
flutter config --enable-macos-desktop
flutter config --enable-linux-desktop
```

(בהתאם למערכת ההפעלה שלך. תומך רק אם יש Flutter 3.0+)

---

### **שלב 2: יצירת פרויקט Flutter**

```bash
flutter create my_desktop_bot
cd my_desktop_bot
```

---

### **שלב 3: הפעלת האפליקציה על דסקטופ**

```bash
flutter run -d windows   # או macos / linux בהתאם
```

---

### **שלב 4: בניית קובץ EXE (Windows בלבד)**

```bash
flutter build windows
```

התוצאה תופיע כאן:

```
build/windows/runner/Release/my_desktop_bot.exe
```

---

### **שלב 5: בדיקות**

* תוודא שה־`main.dart` שלך לא רק מריץ את האפליקציה, אלא גם יוצר UI שמראה שהכל תקין (לדוגמה, טקסט Hello או הבועה הצפה).
* כדי לבדוק OCR ו־GPT תשלב אותם בהדרגה דרך `flutter_tesseract_ocr` ו־HTTP ל־GPT.

---

### **שיפורים נוספים**

* הוסף תמיכה בשמירת קונטקסט פשוטה עם Hive.
* הוסף תרגום תשובות לעברית אוטומטית.
* פתח UI בסיסי עם כפתורים להדרכה.

---

רוצה שאכין לך starter עם קוד פתיחה ל־main.dart כולל UI בסיסי ומקום להתחבר ל־OCR/GPT?
